# syntax=docker/dockerfile:1.7
ARG NODE_VERSION=22
ARG N8N_VERSION=snapshot
ARG LAUNCHER_VERSION=1.1.3
ARG TARGETPLATFORM

# ==============================================================================
# STAGE 1: Base Dependencies (Cached)
# ==============================================================================
FROM node:${NODE_VERSION}-alpine AS base-deps

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    tini \
    tzdata \
    ca-certificates \
    dumb-init

# Install pnpm globally
RUN corepack enable && corepack prepare pnpm@latest --activate

# ==============================================================================
# STAGE 2: Dependencies Installer (Heavily Cached)
# ==============================================================================
FROM base-deps AS deps-installer

WORKDIR /app

# Copy dependency files first (for better caching)
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY packages/*/package.json ./packages/

# Create directory structure
RUN find packages -name "package.json" -type f | while read pkg; do \
    dir=$(dirname "$pkg"); \
    mkdir -p "$dir"; \
    cp "$pkg" "$dir/"; \
done

# Install ALL dependencies with cache mount
RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile --prefer-offline

# ==============================================================================
# STAGE 3: Frontend Builder (Can be cached separately)
# ==============================================================================
FROM deps-installer AS frontend-builder

# Copy frontend source code
COPY packages/@n8n/design-system ./packages/@n8n/design-system
COPY packages/@n8n/chat ./packages/@n8n/chat
COPY packages/editor-ui ./packages/editor-ui

# Copy shared packages that frontend depends on
COPY packages/@n8n/api-types ./packages/@n8n/api-types
COPY packages/@n8n/permissions ./packages/@n8n/permissions
COPY packages/workflow ./packages/workflow

# Build frontend with cache
RUN --mount=type=cache,id=turbo-cache,target=/app/.turbo \
    TURBO_CACHE_DIR=/app/.turbo \
    pnpm --filter @n8n/design-system build && \
    pnpm --filter @n8n/chat build && \
    pnpm --filter n8n-editor-ui build

# ==============================================================================
# STAGE 4: Backend Builder
# ==============================================================================
FROM deps-installer AS backend-builder

# Copy all source code
COPY . .

# Copy built frontend from previous stage
COPY --from=frontend-builder /app/packages/@n8n/design-system/dist ./packages/@n8n/design-system/dist
COPY --from=frontend-builder /app/packages/@n8n/chat/dist ./packages/@n8n/chat/dist
COPY --from=frontend-builder /app/packages/editor-ui/dist ./packages/editor-ui/dist

# Build backend with turbo cache
RUN --mount=type=cache,id=turbo-cache,target=/app/.turbo \
    --mount=type=cache,id=tsc-cache,target=/app/packages/cli/.tsbuildinfo \
    TURBO_CACHE_DIR=/app/.turbo \
    pnpm build:backend

# Compile for production
RUN cd packages/cli && pnpm compile:build

# ==============================================================================
# STAGE 5: Production Pruner
# ==============================================================================
FROM deps-installer AS prod-pruner

# Copy built application
COPY --from=backend-builder /app/packages ./packages
COPY --from=backend-builder /app/patches ./patches

# Prune to production dependencies only
RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm/store \
    pnpm prune --prod && \
    # Clean up unnecessary files
    find . -name "*.ts" -type f -delete && \
    find . -name "*.map" -type f -delete && \
    find . -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "*.test.js" -type f -delete && \
    find . -name "*.spec.js" -type f -delete

# ==============================================================================
# STAGE 6: Task Runner Launcher
# ==============================================================================
FROM alpine:3.20.3 AS launcher-downloader
ARG TARGETPLATFORM=linux/amd64
ARG LAUNCHER_VERSION=1.1.3

RUN apk add --no-cache wget ca-certificates

RUN set -e; \
    case "${TARGETPLATFORM}" in \
        "linux/amd64") ARCH_NAME="amd64" ;; \
        "linux/arm64") ARCH_NAME="arm64" ;; \
        *) echo "Unsupported platform: ${TARGETPLATFORM}" && exit 1 ;; \
    esac; \
    echo "Platform: ${TARGETPLATFORM}, Architecture: ${ARCH_NAME}, Version: ${LAUNCHER_VERSION}"; \
    mkdir /launcher-temp && cd /launcher-temp; \
    wget -q "https://github.com/n8n-io/task-runner-launcher/releases/download/${LAUNCHER_VERSION}/task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz"; \
    wget -q "https://github.com/n8n-io/task-runner-launcher/releases/download/${LAUNCHER_VERSION}/task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz.sha256"; \
    echo "$(cat task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz.sha256) task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz" > checksum.sha256; \
    sha256sum -c checksum.sha256; \
    mkdir -p /launcher-bin; \
    tar xzf task-runner-launcher-${LAUNCHER_VERSION}-linux-${ARCH_NAME}.tar.gz -C /launcher-bin; \
    cd / && rm -rf /launcher-temp

# ==============================================================================
# STAGE 7: Final Runtime Image
# ==============================================================================
FROM node:${NODE_VERSION}-alpine AS runtime

ARG N8N_VERSION
ARG N8N_RELEASE_TYPE=dev
ENV NODE_ENV=production
ENV N8N_RELEASE_TYPE=${N8N_RELEASE_TYPE}
ENV N8N_VERSION=${N8N_VERSION}
ENV NODE_ICU_DATA=/usr/lib/node_modules/full-icu
ENV SHELL=/bin/sh

# Install runtime dependencies only
RUN apk add --no-cache \
    tini \
    tzdata \
    ca-certificates \
    dumb-init

WORKDIR /usr/local/lib/node_modules/n8n

# Copy application from pruned stage
COPY --from=prod-pruner --chown=node:node /app .

# Copy launcher
COPY --from=launcher-downloader /launcher-bin/* /usr/local/bin/

# Copy entrypoint and config
COPY --chown=node:node docker/images/n8n/docker-entrypoint.sh /
COPY --chown=node:node docker/images/n8n/n8n-task-runners.json /etc/n8n-task-runners.json

# Create n8n user directory and link binary
RUN mkdir -p /home/node/.n8n && \
    chown -R node:node /home/node && \
    ln -s /usr/local/lib/node_modules/n8n/packages/cli/bin/n8n /usr/local/bin/n8n && \
    chmod +x /docker-entrypoint.sh

# Rebuild native modules for production
RUN cd /usr/local/lib/node_modules/n8n && \
    npm rebuild sqlite3 --build-from-source

USER node
WORKDIR /home/node

EXPOSE 5678/tcp

ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]

LABEL org.opencontainers.image.title="n8n" \
      org.opencontainers.image.description="Workflow Automation Tool" \
      org.opencontainers.image.source="https://github.com/InslyAI/n8n" \
      org.opencontainers.image.url="https://n8n.io" \
      org.opencontainers.image.version=${N8N_VERSION}